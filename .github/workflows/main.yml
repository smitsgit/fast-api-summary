name: Cotinuous integration and delivery
on: [push]
env:
  IMAGE: docker.pkg.github.com/smitsgit/fast-api-summary/web

jobs:

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the master
        uses: actions/checkout@v1
      - name: Login into github packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Image
        run: |
          docker pull {{ env.IMAGE }}:latest || true
      - name: Build Image
        run: |
          docker build \
             --cache-from ${{ env.IMAGE }}:latest \
             --tag ${{ env.IMAGE }}:latest \
             --file ./Dockerfile.prod \
             "."
      - name: Push Image
        run: |
          docker push ${{ env.IMAGE}}:latest

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the master
        uses: actions/checkout@v1
      - name: Login into github packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Image
        run: |
          docker pull {{ env.IMAGE }}:latest || true
      - name: Build Image
        run: |
          docker build \
             --cache-from ${{ env.IMAGE }}:latest \
             --tag ${{ env.IMAGE }}:latest \
             --file ./Dockerfile.prod \
             "."
      - name: Run container
        run: |
          docker run \
             -d \
             --name fastapi-tdd \
             -e PORT=8765 \
             -e ENVIRONMENT=dev \
             -e DATABASE_TEST_URL=sqlite://sqlite.db \
             -p 5003:8765 \
             ${{ env.IMAGE }}:latest
      - name: Run Pytest
        run: docker exec fastapi-tdd python -m pytest
#      - name: Run black
#        run: docker exec fastapi-tdd python -m black . --check

  deploy:
    name: Deply to Heroku
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      HEROKU_APP_NAME: powerful-cove-10442
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web

    steps:
      - name: Checkout the master
        uses: actions/checkout@v1
      - name: Login into github packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Image
        run: |
          docker pull {{ env.IMAGE }}:latest || true
      - name: Build Image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
            --file ./Dockerfile.prod \
            "."
      - name: Log in into the heroku container registry
        run: |
          docker login -u _ -p ${ HEROKU_AUTH_TOKEN } registry.heroku.com
        env:
          HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Push to the registry
        run: |
         docker push ${{ env.HEROKU_REGISTRY_IMAGE }}

      - name: Set the environment variables
        run: |
          echo ::set-env name=HEROKU_REGISTRY_IMAGE::${{ env.HEROKU_REGISTRY_IMAGE }}
          echo ::set-env name=HEROKU_AUTH_TOKEN::${{ env.HEROKU_AUTH_TOKEN }}

      - name: Release
        run: |
          chmod +x ./release.sh
          ./release.sh
